/*
Octopus-ReEL - Realtime Encephalography Laboratory Network
   Copyright (C) 2007-2025 Barkin Ilhan

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.

 Contact info:
 E-Mail:  barkin@unrlabs.org
 Website: http://icon.unrlabs.org/staff/barkin/
 Repo:    https://github.com/4e0n/
*/

#pragma once

#include "../../../common/obj3d.h"

class HeadModel {
 public:
  HeadModel() {
   scalpLoaded=skullLoaded=brainLoaded=gizmoOnReal=false;
  }

  void init() { scalpParamR=15.0; currentGizmo=0; currentElectrode=0; cModeThreshold=20; }

  Obj3D scalp,skull,brain;
  bool scalpLoaded,skullLoaded,brainLoaded, gizmoOnReal; int currentElectrode, currentGizmo, scalpParamR, cModeThreshold; 

  void loadObj(QString fn,Obj3D* obj) {
   QFile file; QTextStream stream; QString dummyStr; QStringList dummySL,dummySL2;
   Coord3D c; QVector<unsigned int> idx;

   file.setFileName(fn); file.open(QIODevice::ReadOnly|QIODevice::Text); stream.setDevice(&file);

   obj->reset(); // Reset previous
 
   while (!stream.atEnd()) {
    dummyStr=stream.readLine(); dummySL=dummyStr.split(" ");
    if (dummySL[0]=="v") {
     c.x=dummySL[1].toFloat(); c.y=dummySL[2].toFloat(); c.z=dummySL[3].toFloat();
     obj->c.append(c);
    } else if (dummySL[0]=="f") { idx.resize(0);
     dummySL2=dummySL[1].split("/"); idx.append(dummySL2[0].toInt());
     dummySL2=dummySL[2].split("/"); idx.append(dummySL2[0].toInt());
     dummySL2=dummySL[3].split("/"); idx.append(dummySL2[0].toInt());
     obj->idx.append(idx);
    }
   }
   stream.setDevice(0); file.close();
  }

  void loadScalp(QString fn) { loadObj(fn,&scalp); scalpLoaded=true; }
  void loadSkull(QString fn) { loadObj(fn,&skull); skullLoaded=true; }
  void loadBrain(QString fn) { loadObj(fn,&brain); brainLoaded=true; }

  //QVector<Coord3D> paramCoord,realCoord; QVector<QVector<int> > paramIndex;
  //QVector<float> scalpParamR,scalpNasion,scalpCzAngle;
  //QVector<bool> hwFrameV,hwGridV,hwDigV,hwParamV,hwRealV,hwGizmoV,hwAvgsV,hwScalpV,hwSkullV,hwBrainV;
  // Gizmo
  //QVector<bool> gizmoOnReal,elecOnReal; QVector<int> currentGizmo,currentElectrode,curElecInSeq;
};

//  void loadReal(QString fileName) { ;
//   QString realLine; QStringList realLines,realValidLines,opts; QFile realFile(fileName); int p,c;
//   realFile.open(QIODevice::ReadOnly); QTextStream realStream(&realFile);
   // Read all
//   while (!realStream.atEnd()) { realLine=realStream.readLine(160); realLines.append(realLine); } realFile.close();

   // Get valid lines
//   for (int i=0;i<realLines.size();i++)
//    if (!(realLines[i].at(0)=='#') && realLines[i].split(" ",Qt::SkipEmptyParts).size()>4) realValidLines.append(realLines[i]);

   // Find the essential line defining gizmo names
//   for (int ll=0;ll<realValidLines.size();ll++) {
//    opts=realValidLines[ll].split(" ",Qt::SkipEmptyParts);
//    if (opts.size()==8 && opts[0]=="v") {
//     opts.removeFirst(); p=opts[0].toInt(); c=-1;
//     for (int i=0;i<acqChannels.size();i++) for (int j=0;j<acqChannels[i].size();j++) {
//      if (p==acqChannels[i][j]->physChn) { c=i; break; }
////    if (c!=-1) printf("%d - %d\n",p,c); else qDebug() << "octopus_acq_client: <AcqMaster> <LoadReal> Channel does not exist!";
//      acqChannels[i][c]->real[0]=opts[1].toFloat();
//      acqChannels[i][c]->real[1]=opts[2].toFloat();
//      acqChannels[i][c]->real[2]=opts[3].toFloat();
//      acqChannels[i][c]->realS[0]=opts[4].toFloat();
//      acqChannels[i][c]->realS[1]=opts[5].toFloat();
//      acqChannels[i][c]->realS[2]=opts[6].toFloat();
//     }
//    } else { qDebug() << "octopus_acq_client: <AcqMaster> <LoadReal> Erroneous real coord file.." << opts.size(); break; }
//   } emit repaintGL(4); // Repaint Real coords
//  }

//  void saveReal(QString fileName) { ;
//   QFile realFile(fileName); realFile.open(QIODevice::WriteOnly); QTextStream realStream(&realFile);
//   realStream << "# Octopus real head coordset in headframe xyz's..\n";
//   realStream << "# Generated by Octopus-recorder 0.9.5\n\n";
//   realStream << "# Coord count = " << acqChannels.size() << "\n";
//   for (int i=0;i<acqChannels.size();i++) for (int j=0;j<acqChannels[i].size();j++) {
//    realStream << "v " << acqChannels[i][j]->physChn+1 << " "
//                       << acqChannels[i][j]->real[0] << " "
//                       << acqChannels[i][j]->real[1] << " "
//                       << acqChannels[i][j]->real[2] << " "
//                       << acqChannels[i][j]->realS[0] << " "
//                       << acqChannels[i][j]->realS[1] << " "
//                       << acqChannels[i][j]->realS[2] << "\n";
//   } realFile.close();
//  }

